/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
       ListNode dummy = new ListNode(0);
       ListNode current = dummy;
        
       while(list1!=null && list2!=null){
           if(list1.val<list2.val){
               current.next=list1;
               list1=list1.next;
           }else{
               current.next=list2;
               list2=list2.next;
           }
         current = current.next;
       }
        
     if(list1!=null){
         current.next=list1;
     }else{
         current.next=list2;
     }
      return dummy.next;
    }
}



Linked List: A data structure where each node contains a value and a reference to the next node in the list.
Sorting: Arranging elements in a specific order, such as ascending or descending.
Merging: Combining two or more sorted lists into a single sorted list.

The code consists of two classes: ListNode and MergeSortedLinkedLists. The ListNode class represents a node in the linked list, while the MergeSortedLinkedLists class contains the logic to merge two sorted linked lists

The ListNode class represents a node in the linked list. It has two properties: val, which stores the value of the node, and next, which is a reference to the next node in the list.

The MergeSortedLinkedLists class contains the mergeTwoLists method, which takes two sorted linked lists as input and returns a merged sorted linked list. It uses a dummy node and a current node to keep track of the merged list. The method iterates through both lists, comparing the values of the current nodes and appending the smaller value to the merged list. The current node is then updated to the next node in the merged list. This process continues until one of the lists is exhausted. Finally, the remaining nodes from the non-empty list are appended to the merged list.

public static void main(String[] args) {
        // Creating example lists
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);

        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);

        // Merging lists
        MergeSortedLinkedLists merger = new MergeSortedLinkedLists();
        ListNode mergedList = merger.mergeTwoLists(l1, l2);

        // Printing the merged list
        while (mergedList != null) {
            System.out.print(mergedList.val + " ");
            mergedList = mergedList.next;
        }
    }
In the main method, we create two example lists l1 and l2. These lists are then merged using the mergeTwoLists method. The merged list is printed using a while loop that iterates through the merged list and prints each value.